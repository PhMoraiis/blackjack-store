// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../prisma/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @map("_id")
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  GameWallet    GameWallet?
  GameRound     GameRound[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @map("_id")
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @map("_id")
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model GameWallet {
  id        String      @id @map("_id")
  userId    String      @unique
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  balance   Int         @default(0)
  rounds    GameRound[]
  createdAt DateTime
  updatedAt DateTime

  @@map("game_wallet")
}

model GameRound {
  id           String      @id @map("_id")
  userId       String
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  state        RoundState
  seed         String
  nonce        Int         @default(0)
  hand         String[]    @default([])
  total        Int         @default(0)
  points       Int         @default(0)
  finishedAt   DateTime?
  logs         RoundLog[]
  createdAt    DateTime
  updatedAt    DateTime
  GameWallet   GameWallet? @relation(fields: [gameWalletId], references: [id])
  gameWalletId String?

  @@index([userId])
  @@map("game_round")
}

model RoundLog {
  id         String    @id @map("_id")
  roundId    String
  round      GameRound @relation(fields: [roundId], references: [id], onDelete: Cascade)
  action     String
  card       String?
  nonce      Int?
  totalAfter Int?
  createdAt  DateTime

  @@index([roundId])
  @@map("round_log")
}

enum RoundState {
  IDLE
  PLAYING
  BUST
  FINISHED
}
